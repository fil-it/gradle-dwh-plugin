plugins {
    id 'checkstyle'
    id 'java-gradle-plugin'
    id 'jacoco'
    id "maven-publish"
    id "org.sonarqube"
}
apply from: "gradle/sonar.gradle"
group = 'ru.filit.bi'

def baseVersion = '0.5.0'
version = project.hasProperty('ver') ? project['ver'] : "$baseVersion-SNAPSHOT"

repositories {
    maven {
        url = REPO_RESOLVE_RELEASE
        credentials {
            username PHOENIX_USER
            password PHOENIX_PASSWORD
        }
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.0'
    implementation 'org.liquibase:liquibase-gradle-plugin:2.0.3'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testImplementation 'org.projectlombok:lombok:1.18.12'
}

gradlePlugin {
    plugins {
        simplePlugin {
            id = 'liquibase.dwh.changelog'
            implementationClass = 'liquibase.dwh.changelog.ChangelogPlugin'
        }
    }
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        enabled true
    }
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    reports.html.enabled = false
}
//task integrationTest(type: Test) {
//    useJUnitPlatform()
//    description = "Execute integration tests."
//    group = "verification"
//    include "**/*IT*", "**/*IntTest*"
//    testLogging {
//        events 'FAILED', 'SKIPPED'
//    }
//    reports.html.enabled = false
//}
//check.dependsOn integrationTest

jacocoTestReport {
    executionData tasks.withType(Test)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)

    reports {
        xml.enabled = true
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

//task integrationTestReport(type: TestReport) {
//    destinationDir = file("$buildDir/reports/tests")
//    reportOn integrationTest
//}

checkstyle {
    toolVersion "${checkstyle_version}"
    checkstyleTest.enabled = false
}

publishing {
    repositories {
        maven {
            name 'gismuRelease'
            url = REPO_PUBLISH_RELEASE
            credentials {
                username PHOENIX_USER
                password PHOENIX_PASSWORD
            }
        }
        maven {
            name 'gismuSnapshot'
            url = REPO_PUBLISH_SNAPSHOT
            credentials {
                username PHOENIX_USER
                password PHOENIX_PASSWORD
            }
        }
    }
}

task snapshot {
    dependsOn 'publishPluginMavenPublicationToGismuSnapshotRepository', 'publishSimplePluginPluginMarkerMavenPublicationToGismuSnapshotRepository'
}

task checkRelease {
    doLast {
        if (!project.hasProperty('ver')) {
            throw new GradleException("Version must be explicitly provided with parameter -Pver. It's tag usually")
        }
        if (baseVersion != project.version) {
            throw new GradleException("Version in build.gradle (baseVersion=$baseVersion) not consistent with provided version=$project.version. Synchronize them before release, please.")
        }
        def changelogSectionForCurrentVersion = file('CHANGELOG.md').find { line ->
            if (line.startsWith("## [$baseVersion] - ")) {
                return true
            }
        }
        if (!changelogSectionForCurrentVersion) {
            throw new GradleException("Changelog must contain information about released version ('## [$baseVersion] - ...'). Fill CHANGELOG.md and try release again")
        }
    }
    finalizedBy 'release'
}

task release {
    dependsOn checkRelease, 'publishPluginMavenPublicationToGismuReleaseRepository', 'publishSimplePluginPluginMarkerMavenPublicationToGismuReleaseRepository'
}